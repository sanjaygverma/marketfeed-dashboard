{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/stock.feed.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","stockFeedWs","connect","disconnect","message","stockFeeds","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","StockFeedWebSocketComponent","appComponent","webSocketEndPoint","topic","console","log","ws","stompClient","_this","frame","subscribe","sdkEvent","onMessageReceived","errorCallBack","error","setTimeout","JSON","parse","body","handleMessage","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { StockFeedWebSocketComponent }  from './stock.feed.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'marketfeed-dashboard';\n\n  stockFeedWs: StockFeedWebSocketComponent;\n  stockFeeds: any;\n\n\n  //A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive. Define an ngOnInit() method to handle any additional initialization tasks.\n  ngOnInit(){\n    this.stockFeedWs = new StockFeedWebSocketComponent(new AppComponent());\n    this.stockFeedWs.connect();\n  }\n\n  connect()\n  {\n    this.stockFeedWs.connect();\n  }\n\n  disconnect()\n  {\n    this.stockFeedWs.disconnect();\n  }\n  \n\n  handleMessage(message)\n  {\n    this.stockFeeds= message;\n\n  }\n}\n","<!--The content below is only a placeholder and can be replaced.-->\n<noscript><h2 style=\"color: #ff0000\">Seems your browser doesn't support Javascript! Websocket relies on Javascript being\n  enabled. Please enable\n  Javascript and reload this page!</h2></noscript>\n<div id=\"main-content\" class=\"container\">\n\n    <!-- <div class=\"row\">\n        <div class=\"col-md-12\">\n           {{ stockFeeds }}\n        </div>\n    </div> -->\n\n    <div>\n        <table  cellspacing=\"2\">            \n        <tr><td>Symbol<td><td>Price<td><td>Trend</td></tr>\n        <tr *ngFor = \"let x of stockFeeds\">            \n        <td>{{x.symbol}}</td>\n        <td>{{x.price}}</td>\n        <td>{{x.trend}}</td>\n        </tr>\n        </table>\n  </div>\n\n    \n  <!-- <div class=\"row\">\n      <div class=\"col-md-6\">\n          <form class=\"form-inline\">\n              <div class=\"form-group\">\n                  <label for=\"connect\">WebSocket connection:</label>\n                  <button (click)=\"connect()\" class=\"btn btn-default\" type=\"submit\">Connect</button>\n                  <button (click)=\"disconnect()\" class=\"btn btn-default\" type=\"submit\" disabled=\"disabled\">Disconnect\n                  </button>\n              </div>\n          </form>\n      </div>\n       <div class=\"col-md-6\">\n          <form class=\"form-inline\">\n              <div class=\"form-group\">\n                  <label for=\"name\">What is your name?</label>\n                  <input type=\"text\" [(ngModel)]=\"name\" class=\"form-control\" name=\"name\"> <br>\n              </div>\n              <button (click)=\"sendMessage()\" class=\"btn btn-default\" type=\"submit\">Send</button>\n          </form>\n      </div>\n\n      <p> {{ stockFeeds }}</p>\n  </div> -->\n \n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms'\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import * as Stomp from 'stompjs';\nimport * as SockJS from 'sockjs-client';\n\nimport { AppComponent } from './app.component'\n\nexport class StockFeedWebSocketComponent{\n\n    webSocketEndPoint: string = 'http://localhost:8080/ws';\n    topic: string = \"/feed/stocks/\";\n    stompClient: any; //unsure of the type\n    appComponent: AppComponent;\n\n    constructor(appComponent: AppComponent){\n        this.appComponent = appComponent;\n    }\n\n    connect(){\n        console.log('Initialize the WebSocket connection');\n        let ws = new SockJS(this.webSocketEndPoint); //let ES6 introduced scope is block level eg. method,if condition etc\n        this.stompClient = Stomp.over(ws);\n        const _this = this; // const same as variable but its value cannot be changed\n        _this.stompClient.connect({}, function (frame) {\n            _this.stompClient.subscribe(_this.topic, function(sdkEvent){\n                _this.onMessageReceived(sdkEvent);\n            \n            });\n        },this.errorCallBack);\n    };\n\n    disconnect() {\n        if (this.stompClient !== null) {\n            this.stompClient.disconnect();\n        }\n        console.log(\"Disconnected\");\n    }\n\n    // on error, schedule a reconnection attempt\n    errorCallBack(error) {\n        console.log(\"errorCallBack -> \" + error)\n        setTimeout(() => {\n            this.connect();\n        }, 5000);\n    };\n\n    onMessageReceived(message) {\n        //console.log(\"Message Recieved from Server :: \" + message);\n        console.log(\"Message ***** :: ((\" );\n        //console.log(\"Message Recieved from Server :: \" + message.body);\n        console.log(\"Message Recieved from Server :: \" + JSON.parse(message.body));\n        this.appComponent.handleMessage(JSON.parse(message.body));\n\n        //this.appComponent.handleMessage(message.body);\n        //this.appComponent.handleMessage(JSON.stringify(message.body));\n    }\n\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}